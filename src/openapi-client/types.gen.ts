// This file is auto-generated by @hey-api/openapi-ts

/**
 * Project
 */
export type Project = {
    /**
     * Project Id
     */
    id: number;
    /**
     * Name of the Project
     */
    name: string;
    /**
     * Description of the project
     */
    description: string | null;
    /**
     * Date of creaton
     */
    createdAt: Date;
    /**
     * Last time project was updated
     */
    updatedAt: Date | null;
    /**
     * Date when project was deleted
     */
    deletedAt: Date | null;
};

/**
 * Decorated Project
 */
export type DecoratedProject = {
    /**
     * Project Id
     */
    id: number;
    /**
     * Name of the Project
     */
    name: string;
    /**
     * Description of the project
     */
    description: string | null;
    /**
     * List of component types in the project
     */
    componentTypes: Array<ComponentType>;
    /**
     * List of project components
     */
    components: Array<{
        /**
         * X coordinate in the project
         */
        x: number;
        /**
         * Y coordinate in the project
         */
        y: number;
        /**
         * Id of the parent component
         */
        type: number | null;
    }>;
    /**
     * List of project connections
     */
    connections: Array<{
        /**
         * Id of the component
         */
        id: number;
        /**
         * Input X coordinate in case if input is not connected
         */
        inputX: number;
        /**
         * Input Y coordinate in case if input is not connected.
         */
        inputY: number;
        /**
         * Id of the joint of the component this input is connected to. A component can multiple joints, this field specifies which joint was used.
         */
        inputJointId: number | null;
        /**
         * Id of the component in case if this input connected to a component
         */
        inputComponentId: number | null;
        /**
         * Id of another connection this input
         */
        inputConnectorId: number | null;
        /**
         * Position on another connector this input is connected to. The percantage from 1 to 100 that indicated the spot on the line.
         */
        inputConnectorPosition: number | null;
        /**
         * Output X coordinate in case if output is not connected
         */
        outputX: number;
        /**
         * Output Y coordinate in case if output is not connected
         */
        outputY: number;
        /**
         * Id of the joint of the component this output is connected to. A component can multiple joints, this field specifies which joint was used.
         */
        outputJointId: number | null;
        /**
         * Id of the component in case if this output connected to a component
         */
        outputComponentId: number | null;
        /**
         * Id of another connection this output
         */
        outputConnectorId: number | null;
        /**
         * Position on another connector this output is connected to. The percantage from 1 to 100 that indicated the spot on the line.
         */
        outputConnectorPosition: number | null;
    }>;
};

/**
 * Type of Component that can be included into projects.
 */
export type ComponentType = {
    /**
     * Id of the component
     */
    id: number;
    /**
     * Label in the project
     */
    label: string;
    /**
     * List of component joints
     */
    joints: Array<{
        /**
         * Joint Id
         */
        id: number;
        /**
         * Type of the joint: input or output.
         */
        type: 'input' | 'output';
        /**
         * Short name of this joint that helps to identify it visually
         */
        label: string;
    }>;
};

export type GetProjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/projects';
};

export type GetProjectsErrors = {
    /**
     * Error response
     */
    500: {
        /**
         * Code to handle on the frontend
         */
        error: 'UnknownError';
    };
};

export type GetProjectsError = GetProjectsErrors[keyof GetProjectsErrors];

export type GetProjectsResponses = {
    /**
     * List of projects
     */
    200: {
        /**
         * Projects
         */
        items: Array<Project>;
    };
};

export type GetProjectsResponse = GetProjectsResponses[keyof GetProjectsResponses];

export type GetProjectsByIdData = {
    body?: never;
    path: {
        /**
         * Id of the project
         */
        id: string;
    };
    query?: never;
    url: '/projects/{id}';
};

export type GetProjectsByIdErrors = {
    /**
     * Error response
     */
    500: {
        /**
         * Code to handle on the frontend
         */
        error: 'UnknownError';
    };
};

export type GetProjectsByIdError = GetProjectsByIdErrors[keyof GetProjectsByIdErrors];

export type GetProjectsByIdResponses = {
    /**
     * Project response
     */
    200: {
        /**
         * Data envelope
         */
        data: {
            project: DecoratedProject;
        };
    };
};

export type GetProjectsByIdResponse = GetProjectsByIdResponses[keyof GetProjectsByIdResponses];

export type ClientOptions = {
    baseURL: `${string}://${string}/api/v1` | (string & {});
};