// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetProjectsData, GetProjectsResponses, GetProjectsErrors, GetProjectsByIdData, GetProjectsByIdResponses, GetProjectsByIdErrors } from './types.gen';
import { getProjectsResponseTransformer } from './transformers.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Lists logic circuit projects of the user
 */
export const getProjects = <ThrowOnError extends boolean = false>(options?: Options<GetProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProjectsResponses, GetProjectsErrors, ThrowOnError>({
        responseType: 'json',
        responseTransformer: getProjectsResponseTransformer,
        url: '/projects',
        ...options
    });
};

/**
 * Lists logic circuit projects of the user
 */
export const getProjectsById = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectsByIdResponses, GetProjectsByIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/projects/{id}',
        ...options
    });
};