// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getProjects, getProjectsById } from '../sdk.gen';
import { queryOptions } from '@tanstack/react-query';
import type { GetProjectsData, GetProjectsByIdData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getProjectsQueryKey = (options?: Options<GetProjectsData>) => createQueryKey('getProjects', options);

/**
 * Lists logic circuit projects of the user
 */
export const getProjectsOptions = (options?: Options<GetProjectsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjects({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectsQueryKey(options)
    });
};

export const getProjectsByIdQueryKey = (options: Options<GetProjectsByIdData>) => createQueryKey('getProjectsById', options);

/**
 * Lists logic circuit projects of the user
 */
export const getProjectsByIdOptions = (options: Options<GetProjectsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjectsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectsByIdQueryKey(options)
    });
};